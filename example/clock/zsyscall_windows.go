// Code generated by 'go generate'; DO NOT EDIT.

package main

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modkernel32 = windows.NewLazySystemDLL("kernel32.dll")
	moduser32   = windows.NewLazySystemDLL("user32.dll")

	procGetModuleHandleExW = modkernel32.NewProc("GetModuleHandleExW")
	procCreateWindowExW    = moduser32.NewProc("CreateWindowExW")
	procDefWindowProcW     = moduser32.NewProc("DefWindowProcW")
	procDispatchMessageW   = moduser32.NewProc("DispatchMessageW")
	procGetClientRect      = moduser32.NewProc("GetClientRect")
	procGetMessageW        = moduser32.NewProc("GetMessageW")
	procInvalidateRect     = moduser32.NewProc("InvalidateRect")
	procLoadCursorW        = moduser32.NewProc("LoadCursorW")
	procLoadIconW          = moduser32.NewProc("LoadIconW")
	procPostQuitMessage    = moduser32.NewProc("PostQuitMessage")
	procRegisterClassExW   = moduser32.NewProc("RegisterClassExW")
	procShowWindow         = moduser32.NewProc("ShowWindow")
	procTranslateMessage   = moduser32.NewProc("TranslateMessage")
	procValidateRect       = moduser32.NewProc("ValidateRect")
)

func GetModuleHandle(flags DWORD, moduleName *uint16, module *HMODULE) (err error) {
	r1, _, e1 := syscall.Syscall(procGetModuleHandleExW.Addr(), 3, uintptr(flags), uintptr(unsafe.Pointer(moduleName)), uintptr(unsafe.Pointer(module)))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func CreateWindow(exStyle DWORD, className string, windowName string, style DWORD, x int32, y int32, width int32, height int32, wndParent HWND, menu HMENU, instance HINSTANCE, param unsafe.Pointer) (wnd HWND, err error) {
	var _p0 *uint16
	_p0, err = syscall.UTF16PtrFromString(className)
	if err != nil {
		return
	}
	var _p1 *uint16
	_p1, err = syscall.UTF16PtrFromString(windowName)
	if err != nil {
		return
	}
	return _CreateWindow(exStyle, _p0, _p1, style, x, y, width, height, wndParent, menu, instance, param)
}

func _CreateWindow(exStyle DWORD, className *uint16, windowName *uint16, style DWORD, x int32, y int32, width int32, height int32, wndParent HWND, menu HMENU, instance HINSTANCE, param unsafe.Pointer) (wnd HWND, err error) {
	r0, _, e1 := syscall.Syscall12(procCreateWindowExW.Addr(), 12, uintptr(exStyle), uintptr(unsafe.Pointer(className)), uintptr(unsafe.Pointer(windowName)), uintptr(style), uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(wndParent), uintptr(menu), uintptr(instance), uintptr(param))
	wnd = HWND(r0)
	if wnd == 0 {
		err = errnoErr(e1)
	}
	return
}

func DefWindowProc(wnd HWND, msg UINT, wParam WPARAM, lParam LPARAM) (r LRESULT) {
	r0, _, _ := syscall.Syscall6(procDefWindowProcW.Addr(), 4, uintptr(wnd), uintptr(msg), uintptr(wParam), uintptr(lParam), 0, 0)
	r = LRESULT(r0)
	return
}

func DispatchMessage(msg *MSG) (r LRESULT) {
	r0, _, _ := syscall.Syscall(procDispatchMessageW.Addr(), 1, uintptr(unsafe.Pointer(msg)), 0, 0)
	r = LRESULT(r0)
	return
}

func GetClientRect(wnd HWND, rect *RECT) (err error) {
	r1, _, e1 := syscall.Syscall(procGetClientRect.Addr(), 2, uintptr(wnd), uintptr(unsafe.Pointer(rect)), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func GetMessage(msg *MSG, wnd HWND, msgFilterMin UINT, msgFilterMax UINT) (b bool, err error) {
	r0, _, e1 := syscall.Syscall6(procGetMessageW.Addr(), 4, uintptr(unsafe.Pointer(msg)), uintptr(wnd), uintptr(msgFilterMin), uintptr(msgFilterMax), 0, 0)
	b = r0 != 0
	if r0 == ^uintptr(0) {
		err = errnoErr(e1)
	}
	return
}

func InvalidateRect(wnd HWND, rect *RECT, erase bool) (b bool) {
	var _p0 uint32
	if erase {
		_p0 = 1
	}
	r0, _, _ := syscall.Syscall(procInvalidateRect.Addr(), 3, uintptr(wnd), uintptr(unsafe.Pointer(rect)), uintptr(_p0))
	b = r0 != 0
	return
}

func LoadCursor(instance HINSTANCE, cursorName uintptr) (cursor HCURSOR, err error) {
	r0, _, e1 := syscall.Syscall(procLoadCursorW.Addr(), 2, uintptr(instance), uintptr(cursorName), 0)
	cursor = HCURSOR(r0)
	if cursor == 0 {
		err = errnoErr(e1)
	}
	return
}

func LoadIcon(instance HINSTANCE, iconName uintptr) (icon HICON, err error) {
	r0, _, e1 := syscall.Syscall(procLoadIconW.Addr(), 2, uintptr(instance), uintptr(iconName), 0)
	icon = HICON(r0)
	if icon == 0 {
		err = errnoErr(e1)
	}
	return
}

func PostQuitMessage(exitCode int32) {
	syscall.Syscall(procPostQuitMessage.Addr(), 1, uintptr(exitCode), 0, 0)
	return
}

func RegisterClass(class *WNDCLASSEX) (a ATOM, err error) {
	r0, _, e1 := syscall.Syscall(procRegisterClassExW.Addr(), 1, uintptr(unsafe.Pointer(class)), 0, 0)
	a = ATOM(r0)
	if a == 0 {
		err = errnoErr(e1)
	}
	return
}

func ShowWindow(wnd HWND, cmdShow int32) (b bool) {
	r0, _, _ := syscall.Syscall(procShowWindow.Addr(), 2, uintptr(wnd), uintptr(cmdShow), 0)
	b = r0 != 0
	return
}

func TranslateMessage(msg *MSG) (b bool) {
	r0, _, _ := syscall.Syscall(procTranslateMessage.Addr(), 1, uintptr(unsafe.Pointer(msg)), 0, 0)
	b = r0 != 0
	return
}

func ValidateRect(wnd HWND, rect *RECT) (b bool) {
	r0, _, _ := syscall.Syscall(procValidateRect.Addr(), 2, uintptr(wnd), uintptr(unsafe.Pointer(rect)), 0)
	b = r0 != 0
	return
}
